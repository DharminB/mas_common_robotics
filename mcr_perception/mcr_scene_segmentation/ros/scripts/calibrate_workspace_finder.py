#!/usr/bin/env python
"""This script will call workspace finder service in an infinite loop. After
each workspace detection the user is asked to confirm that the output if
correct. If yes, the user should hit \"enter\" without typing anything. If no,
the user should type any character(s) and then hit \"enter\". To stop data
gathering and process it the user should type \"stop\".
"""

NODE = 'calibrate_workspace_finder'

import rospy
import textwrap
import numpy as np
import os

from mcr_perception_msgs.msg import PlanarPolygon
from std_msgs.msg import String

WORKSPACE_TOPIC_NAME = '/mcr_perception/workspace_finder/polygon'
EVENT_TOPIC_NAME = '/mcr_perception/workspace_finder/event_in'

CONFIG = 'workspace_constraints.yaml'



def workspace_callback(data):
    global workspace_data


    print 'received data'
    workspace_data = data

if __name__ == '__main__':
    rospy.init_node('workspace_calibration')

    print ':: Workspace finder calibration ::'
    print ''
    print textwrap.fill(__doc__)
    print ''

    global workspace_data

    workspace_data = None 
 
    pub_event = rospy.Publisher(EVENT_TOPIC_NAME, String, queue_size=1)
    sub_workspace = rospy.Subscriber(WORKSPACE_TOPIC_NAME, PlanarPolygon, workspace_callback)

    rospy.sleep(1)
	
    dataset = np.array([])

    while not rospy.is_shutdown():
	print '\nPublish event msg to topic <<%s>> ...' % EVENT_TOPIC_NAME
	pub_event.publish("e_trigger")

	print '\nWait for workspace data  <<%s>> ...' % WORKSPACE_TOPIC_NAME

	start_time = rospy.Time.now()
	while workspace_data is None and not rospy.is_shutdown() and (rospy.Time.now() - start_time).to_sec() < 4:
	    print "time diff", (rospy.Time.now() - start_time).to_sec()
	    rospy.sleep(0.1)
	    
        try:
            answer = raw_input('Workspace found. Add it to the dataset? ')
            if answer == 'a':
                print 'Added', workspace_data.coefficients, 'to the dataset'
                dataset = np.append(dataset, workspace_data.coefficients)
            elif answer == 'stop':
                print 'Done with data gathering.'
                break
	    else:
		continue

        except rospy.ServiceException:
            exit('Service call failed!')

        workspace_data = None


    print ''
    dataset = np.reshape(dataset, (-1, 4))
    median = np.median(dataset, axis=0)
    std = np.std(dataset, axis=0)
    print 'Median ', median
    print 'Std    ', std
    print 'Writing constraints to file %s' % CONFIG
    config = open(CONFIG, 'w')
    config.write('# Plane constraints for workspace finder\n')
    config.write('# Generated by %s script\n' % os.path.basename(__file__))
    config.write('normal_x: %f\n' % median[0])
    config.write('normal_y: %f\n' % median[1])
    config.write('normal_z: %f\n' % median[2])
    config.write('distance: %f\n' % median[3])
    config.close()
    print ''
    print 'Done'
